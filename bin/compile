#!/bin/bash
# Usage: bin/compile <build-dir> <cache-dir>

set -e
set -o pipefail




# START CONFIG
APACHE_VERSION=2.2.25
LIBMCRYPT_VERSION=2.5.8
LIBMEMCACHED_VERSION=1.0.7
PHP_VERSION=5.3.27
NEWRELIC_VERSION=2.9.5.78
# END CONFIG



#   -------------------------------------------    Set up File and Directory Names      -------------------------------------------

# get the value of our S3 bucket from an environment variable
ENV_DIR=$3
for KEY in S3_BUCKET; do
  [ -f $ENV_DIR/$KEY ] && export "$KEY=$(cat $ENV_DIR/$KEY)"
  [ -z "${!KEY}" ] && echo "$KEY must be set in the env" && exit 1
done


S3_URL="http://s3.amazonaws.com/${S3_BUCKET}"

SUBDIR="mpod-wp"
MANIFEST_FILE="manifest.md5sum"
APR_FILE="libaprutil-1.so.0"
APACHE_FILE="apache-${APACHE_VERSION}.tar.gz"
MCRYPT_FILE="libmcrypt-${LIBMCRYPT_VERSION}.tar.gz"
MEMCACHED_FILE="libmemcached-${LIBMEMCACHED_VERSION}.tar.gz"
PHP_FILE="php-${PHP_VERSION}.tar.gz"
NEWRELIC_FILE="newrelic-${NEWRELIC_VERSION}-heroku.tar.gz"

MANIFEST_URL="${S3_URL}/${SUBDIR}/${MANIFEST_FILE}"
APR_URL="${S3_URL}/${SUBDIR}/${APR_FILE}"
APACHE_URL="${S3_URL}/${SUBDIR}/${APACHE_FILE}"
MCRYPT_URL="${S3_URL}/${SUBDIR}/${MCRYPT_FILE}"
MEMCACHED_URL="${S3_URL}/${SUBDIR}/${MEMCACHED_FILE}"
PHP_URL="${S3_URL}/${SUBDIR}/${PHP_FILE}"
NEWRELIC_URL="${S3_URL}/${SUBDIR}/${NEWRELIC_FILE}"
COMPOSER_URL="http://getcomposer.org/composer.phar"


# Heroku will pass in several arguments when it calls this buildpack. They are paths to temporary directories that will be used while putting everything together
BIN_DIR=$(dirname $0)
BUILD_DIR=$1
CACHE_DIR=$2
BUNDLE_DIR="${CACHE_DIR}/bundles"
LP_DIR=`cd $(dirname $0); cd ..; pwd`
export COMPOSER_HOME="${CACHE_DIR}/.composer"

echo "BIN_DIR = $BIN_DIR"
echo "BUILD_DIR = $BUILD_DIR"
echo "CACHE_DIR = $CACHE_DIR"
echo "LP_DIR = $LP_DIR"
echo "COMPOSER_HOME = $COMPOSER_HOME"
#



#   ---------------------------------------------------    Herlper Functions      --------------------------------------------------
function indent() {
    c='s/^/       /'
    case $(uname) in
        Darwin) sed -l "$c";;
        *)      sed -u "$c";;
    esac
}

function check_md5() {
    SUMS_FILE="${BUNDLE_DIR}/${MANIFEST_FILE}"
    TARGET="$1"
    SUM=`cat "${SUMS_FILE}" | grep "${TARGET}" | cut -d ' ' -f 1`
    OUTPUT=`md5sum ${BUNDLE_DIR}/${TARGET} | cut -d ' ' -f 1`
    ! [ "$SUM" = "$OUTPUT" ]
}

function download_url() {
    TARGET_URL="$1"
 #   curl -s -S -O -L -m 300 --connect-timeout 60 "$TARGET_URL"
 curl -O -L -m 300 --connect-timeout 60 "$TARGET_URL"

}


#  ------------------------------------------------------------   Create and clear various directories  ------------------------------------------------------------
# include .files when moving things around
shopt -s dotglob

mkdir -p $BUILD_DIR $CACHE_DIR ${BUNDLE_DIR} ${BUILD_DIR}/local ${BUILD_DIR}/vendor/bin ${COMPOSER_HOME}

pushd ${BUNDLE_DIR} > /dev/null

if [ -n "`find . -type f -atime +30`" ]
then
    echo -e "\n\n-----> Pruning Unused Cached Bundles"
    find . -type f -atime +30 -delete | indent
fi



#  ------------------------------------------------------------   Manifest  ------------------------------------------------------------
echo -e "\n\n-----> Fetching Manifest"
echo ${MANIFEST_URL} | indent
download_url ${MANIFEST_URL}



#  ------------------------------------------------------  Missing Linux package  -------------------------------------------------------
# Heroku installs of Ubuntu need the APR (Apache Portable Runtime) package installed in order to run Apache
echo -e "\n\n-----> Fetching Apache Portable Runtime library"
echo ${APR_URL} | indent
download_url ${APR_URL}

cp ${APR_FILE} /usr/local/lib/${APR_FILE}
#/app/vendor/apache/bin/httpd


#  -------------------------------------------------------------   Apache  --------------------------------------------------------------
echo -e "\n\n-----> Installing Apache"
echo "pwd = $(pwd)"
if [ -f "${APACHE_FILE}" ]
then
    # check manifest
#    if check_md5 "${APACHE_FILE}"
#    then
        echo "Bundling Apache v${APACHE_VERSION}" | indent
        echo ${APACHE_URL} | indent
        download_url ${APACHE_URL}
#   else
#      echo "Using cached Apache v${APACHE_VERSION}" | indent
#   fi
else
    # fetch
    echo "Bundling Apache v${APACHE_VERSION}" | indent
    echo ${APACHE_URL} | indent
    download_url ${APACHE_URL}
fi

mkdir -p ${BUILD_DIR}/vendor
echo "We just made a new dir - ${BUILD_DIR}/vendor/apache"
tar xvf ${APACHE_FILE} -C ${BUILD_DIR}/vendor
echo "We just tar-ed Apache and changed to the new directory we just made"



#  ------------------------------------------------------------ libmcrypt  ------------------------------------------------------------
echo -e "\n\n-----> Installing libmcrypt"
if [ -f "${MCRYPT_FILE}" ]
then
#    if check_md5 "${MCRYPT_FILE}"
#    then
        echo "Bundling libmcrypt v${LIBMCRYPT_VERSION}" | indent
        echo ${MCRYPT_URL} | indent
        download_url ${MCRYPT_URL}
#    else
#        echo "Using cached libmcrypt v${LIBMCRYPT_VERSION}" | indent
#    fi
else
    echo "Bundling libmcrypt v${LIBMCRYPT_VERSION}" | indent
    echo ${MCRYPT_URL} | indent
    download_url ${MCRYPT_URL}
fi

tar xzf ${MCRYPT_FILE} -C ${BUILD_DIR}/local



#  ------------------------------------------------------------ libmemcached  ------------------------------------------------------------
echo -e "\n\n-----> Installing libmemcached"
if [ -f "${MEMCACHED_FILE}" ]
then
#    if check_md5 "${MEMCACHED_FILE}"
#    then
        echo "Bundling libmemcached v${LIBMEMCACHED_VERSION}" | indent
        echo ${MEMCACHED_URL} | indent
        download_url ${MEMCACHED_URL}
#    else
#        echo "Using cached libmemcached v${LIBMEMCACHED_VERSION}" | indent
#   fi
else
    echo "Bundling libmemcached v${LIBMEMCACHED_VERSION}" | indent
    echo ${MEMCACHED_URL} | indent
    download_url ${MEMCACHED_URL}
fi

tar xzf ${MEMCACHED_FILE} -C ${BUILD_DIR}/local



#  ------------------------------------------------------------    PHP    ------------------------------------------------------------
echo " "
echo -e "\n\n-----> Installing PHP"
if [ -f "$PHP_FILE" ]
then
#    if check_md5 "${PHP_FILE}"
#    then
        echo "Bundling PHP v${PHP_VERSION}" | indent
        echo ${PHP_URL} | indent
        download_url ${PHP_URL}
#    else
#        echo "Using cached PHP v${PHP_VERSION}" | indent
#    fi
else
    echo "Bundling PHP v${PHP_VERSION}" | indent
    echo ${PHP_URL} | indent
    download_url ${PHP_URL}
fi

mkdir -p ${BUILD_DIR}/vendor
tar xzf ${PHP_FILE} -C ${BUILD_DIR}/vendor



#  ------------------------------------------------------------ newrelic  ------------------------------------------------------------
echo -e "\n\n-----> Installing newrelic"
if [ -f "${NEWRELIC_FILE}" ]
then
#    if check_md5 "${NEWRELIC_FILE}"
#    then
        echo "Bundling newrelic daemon v${NEWRELIC_VERSION}" | indent
        echo ${NEWRELIC_URL} | indent
        download_url ${NEWRELIC_URL}
#    else
#        echo "Using cached newrelic daemon v${NEWRELIC_VERSION}" | indent
#    fi
else
    echo "Bundling newrelic daemon v${NEWRELIC_VERSION}" | indent
    echo ${NEWRELIC_URL} | indent
    download_url ${NEWRELIC_URL}
fi

tar xzf ${NEWRELIC_FILE} -C ${BUILD_DIR}/local

popd > /dev/null



#  ------------------------------------------------------------ Composer  ------------------------------------------------------------
echo -e "\n\n-----> Installing Composer"
pushd ${BUILD_DIR} > /dev/null
if [ -f "composer.json" ]
then
    echo -e "\n\n-----> Installing dependencies using Composer"
    GIT_DIR_ORIG=${GIT_DIR}
    unset GIT_DIR

    if [ ! -f "composer.phar" ]
    then
        echo "Fetching composer.phar" | indent
        echo ${COMPOSER_URL} | indent
        download_url ${COMPOSER_URL}
    fi

    # do the deed!
    echo "Running: php composer.phar install" | indent
    LD_LIBRARY_PATH="${BUILD_DIR}/local/lib" ${BUILD_DIR}/vendor/php/bin/php composer.phar install -n | indent

    export GIT_DIR=${GIT_DIR_ORIG}
fi
popd > /dev/null




#  ------------------------------------------------------------  Config files  ------------------------------------------------------------
echo " "
echo -e "\n\n-----> Copying config files"
cp $LP_DIR/conf/php.ini ${BUILD_DIR}/vendor/php/php.ini
cp -a $LP_DIR/conf/etc.d ${BUILD_DIR}/vendor/php/
cp $LP_DIR/conf/httpd.conf ${BUILD_DIR}/vendor/apache/conf/httpd.conf




#  ------------------------------------------------------------  Boot script  ------------------------------------------------------------
echo " "
echo -e "\n\n-----> Installing boot script"
cd $BUILD_DIR
cat >>boot.sh <<EOF
#!/usr/bin/env bash

echo "Booting apache"

# Override config files if provided in app.
if [ -d /app/conf ]; then

    if [ -d /app/conf/etc.d ]; then
        cp -f /app/conf/etc.d/* /app/vendor/php/etc.d/
    fi

    if [ -r /app/conf/php.ini ]; then
        cp -f /app/conf/php.ini /app/vendor/php/php.ini
    fi

    if [ -r /app/conf/httpd.conf ]; then
        cp -f /app/conf/httpd.conf /app/vendor/apache/conf/httpd.conf
    fi

fi


# Set NEWRELIC key
if [ -x "/app/local/bin/newrelic-license" ]; then
    /app/local/bin/newrelic-license
fi

## Preserve current php-fpm.conf so that env list does
## not go out of hand across restarts.
#if [ -r /app/vendor/php/etc/php-fpm.conf.current ]; then
#    cp -f /app/vendor/php/etc/php-fpm.conf.current /app/vendor/php/etc/php-fpm.conf
#else
#    cp -f /app/vendor/php/etc/php-fpm.conf /app/vendor/php/etc/php-fpm.conf.current
#fi
#
## Expose Heroku config vars to PHP-FPM processes
#for var in \`env | cut -f1 -d=\`; do
#    echo "env[\$var] = \\$\${var}" >> /app/vendor/php/etc/php-fpm.conf
#done

#touch /app/vendor/apache/logs/access.log /app/vendor/apache/logs/error.log /app/local/var/log/newrelic/newrelic-daemon.log /app/local/var/log/newrelic/php_agent.log
#mkdir -p client_body_temp fastcgi_temp proxy_temp scgi_temp uwsgi_temp
#(tail -f -n 0 /app/vendor/apache/logs/*.log /app/vendor/php/var/log/*.log /app/local/var/log/newrelic/*.log &)

if [ "\${NEW_RELIC_LICENSE_KEY}" ]; then
    /app/local/bin/newrelic-daemon -c /app/local/etc/newrelic.cfg -d error
fi

for var in \`env|cut -f1 -d=\`; do
echo "PassEnv \$var" >> /app/vendor/apache/conf/httpd.conf;
done
touch /app/vendor/apache/logs/error_log
touch /app/vendor/apache/logs/access_log
tail -F /app/vendor/apache/logs/error_log &
tail -F /app/vendor/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/vendor/php/lib/php
export PHP_INI_SCAN_DIR=/app/vendor/www
echo "Launching apache"
exec /app/vendor/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh


echo -e "\n\n-----> Done with compile"
